<h4>Свойства data и методы</h4>

<a href="https://vueframework.com/docs/v3/ru/ru/guide/computed.html#%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B-%D0%BD%D0%B0%D0%B1%D0%BB%D1%8E%D0%B4%D0%B0%D1%82%D0%B5%D0%BB%D0%B8"
    target="_blank">link...</a>

<div id="app">
    count = {{count}}
    <button v-on:click="increment">Up vote</button>
    <span v-bind:title="toTitleDate(date)">
        {{ formatDate(date) }}
    </span>



    @* 1й вариант *@
    <div id="computed-basics" style="margin: 20px;">
        <p>Есть опубликованные книги:</p>
        <span>{{ author.books.length > 0 ? 'Да' : 'Нет' }}</span>
    </div>
    @* 2й вариант *@
    <div id="computed-basics" style="margin: 20px;">
        <p>Есть опубликованные книги (2й вариант):</p>
        <span>{{ publishedBooksMessage }}</span>
    </div>

</div>


<div id="watch-example">
    <p>
        Задайте вопрос, на который можно ответить «да» или «нет»:
        <input v-model="question" />
    </p>
    <p>{{ answer }}</p>
</div>



@section Scripts{
<script>
    const app = Vue.createApp({
        data() {
            return {
                count: 4,
                date: '12.12.2022',
                author: {
                    name: 'John Doe',
                    books: [
                        'Vue 2 - Advanced Guide',
                        'Vue 3 - Basic Guide',
                        'Vue 4 - The Mystery'
                    ]
                }

            }
        },
        methods:
        {
            increment() {
                // `this` указывает на экземпляр компонента
                this.count++
            },
            toTitleDate(date) {
                return date;
            },
            formatDate(date) {
                return date;
            }
        },
        computed: {
            // геттер вычисляемого свойства
            publishedBooksMessage() {
                // `this` указывает на экземпляр vm
                return this.author.books.length > 0 ? 'Да' : 'Нет'
            },
            fullName: {
                // геттер (для получения значения)
                get() {
                    return this.firstName + ' ' + this.lastName
                },
                // сеттер (при присвоении нового значения)
                set(newValue) {
                    const names = newValue.split(' ')
                    this.firstName = names[0]
                    this.lastName = names[names.length - 1]
                }
            }
        }
    });

    const vm = app.mount('#app');

    console.log(vm.count)       // => 4

    // Присвоение значения в vm.count также обновит $data.count
    vm.$data.count = 5;
    vm.count = 6;

    vm.increment(); //count = 7

    console.log(vm.$data.count) // => 5
</script>

<script src="https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js"></script>
<script>
    const watchExampleVM = Vue.createApp({
        data() {
            return {
                question: '',
                answer: 'Вопросы обычно заканчиваются вопросительным знаком. ;-)'
            }
        },
        watch: {
            // при каждом изменении `question` эта функция будет запускаться вместо axios можно использовать fetch
            question(newQuestion, oldQuestion) {
                if (newQuestion.indexOf('?') > -1) {
                    this.getAnswer()
                }
            }
        },
        methods: {
            getAnswer() {
                this.answer = 'Думаю...'
                axios
                    .get('https://yesno.wtf/api')
                    .then(response => {
                        this.answer = response.data.answer
                    })
                    .catch(error => {
                        this.answer = 'Ошибка! Не могу связаться с API. ' + error
                    })
            }
        }
    }).mount('#watch-example')
</script>
}